name: 'IAC Publish ECR and Deploy ECS'

on:
  push:
    paths-ignore:
      - '.iac/**.tf'
      - '.github/workflows/iac-terraform.yml'
    branches:
      - 'master'
      - 'stage'
  workflow_dispatch:

jobs:
  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    env:
      TF_VAR_PROJECT: ${{ github.event.repository.name }}-${{ github.ref_name }}
      TF_VAR_BRANCH: ${{ github.ref_name }}
      ECR_REPOSITORY: ${{ github.event.repository.name }}-${{ github.ref_name }}
      CONTAINER_NAME: ${{ github.event.repository.name }}-${{ github.ref_name }}
      ECS_SERVICE: ${{ github.event.repository.name }}-${{ github.ref_name }}-service
      ECS_TASK_DEFINITION: ${{ github.event.repository.name }}-${{ github.ref_name }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Export Variables
        run: |
          cd .iac
          oldIFS="$IFS"
          IFS='
          '

          if [ ${{ github.ref_name }} == "prod" ]; then
            branchdir=prod
            # AWS SECRET VARIABLES
            echo TF_VAR_AWS_ACCESS_KEY=${{ secrets.AWSACCOUNT_PROD_AWS_ACCESS_KEY }} >> $GITHUB_ENV
            echo TF_VAR_AWS_SECRET_KEY=${{ secrets.AWSACCOUNT_PROD_AWS_SECRET_KEY }} >> $GITHUB_ENV
            echo AWS_ACCESS_KEY=${{ secrets.AWSACCOUNT_PROD_AWS_ACCESS_KEY }} >> $GITHUB_ENV
            echo AWS_SECRET_KEY=${{ secrets.AWSACCOUNT_PROD_AWS_SECRET_KEY }} >> $GITHUB_ENV
          fi
          if [ ${{ github.ref_name }} == "stage" ]; then
            branchdir=stage
            # AWS SECRET VARIABLES
            echo TF_VAR_AWS_ACCESS_KEY=${{ secrets.AWSACCOUNT_STAGE_AWS_ACCESS_KEY }} >> $GITHUB_ENV
            echo TF_VAR_AWS_SECRET_KEY=${{ secrets.AWSACCOUNT_STAGE_AWS_SECRET_KEY }} >> $GITHUB_ENV
            echo AWS_ACCESS_KEY=${{ secrets.AWSACCOUNT_STAGE_AWS_ACCESS_KEY }} >> $GITHUB_ENV
            echo AWS_SECRET_KEY=${{ secrets.AWSACCOUNT_STAGE_AWS_SECRET_KEY }} >> $GITHUB_ENV
          fi

          #TERRAFORM ENVIRONMENTS VARIABLES
          for i in `cat ./$branchdir/*.var`; do
            if [[ $i != \#* ]]; then
              echo "$i" >> $GITHUB_ENV
            fi
          done
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG -f ${{ env.DOCKERFILEPATH }} .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.TF_VAR_CLUSTER_NAME }}
          wait-for-service-stability: false
          force-new-deployment: true